// Generated by view binder compiler. Do not edit!
package com.example.animepeak.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.animepeak.R;
import io.github.glailton.expandabletextview.ExpandableTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAnimeDetailsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView AnimeImage;

  @NonNull
  public final CardView AnimeImageCard;

  @NonNull
  public final TextView AnimeRelease;

  @NonNull
  public final TextView AnimeStatus;

  @NonNull
  public final CardView aniDetails;

  @NonNull
  public final RelativeLayout animeDetailsMain;

  @NonNull
  public final Toolbar customToolbar;

  @NonNull
  public final RecyclerView episodeList;

  @NonNull
  public final RelativeLayout episodeText;

  @NonNull
  public final ExpandableTextView expandTxt;

  @NonNull
  public final ImageButton favButton;

  @NonNull
  public final RecyclerView genreRecycler;

  @NonNull
  public final ImageView loading;

  @NonNull
  public final TextView netErrorAniDetails;

  @NonNull
  public final LinearLayout releaseDate;

  @NonNull
  public final AppCompatTextView toolbarTitle;

  private ActivityAnimeDetailsBinding(@NonNull RelativeLayout rootView,
      @NonNull ImageView AnimeImage, @NonNull CardView AnimeImageCard,
      @NonNull TextView AnimeRelease, @NonNull TextView AnimeStatus, @NonNull CardView aniDetails,
      @NonNull RelativeLayout animeDetailsMain, @NonNull Toolbar customToolbar,
      @NonNull RecyclerView episodeList, @NonNull RelativeLayout episodeText,
      @NonNull ExpandableTextView expandTxt, @NonNull ImageButton favButton,
      @NonNull RecyclerView genreRecycler, @NonNull ImageView loading,
      @NonNull TextView netErrorAniDetails, @NonNull LinearLayout releaseDate,
      @NonNull AppCompatTextView toolbarTitle) {
    this.rootView = rootView;
    this.AnimeImage = AnimeImage;
    this.AnimeImageCard = AnimeImageCard;
    this.AnimeRelease = AnimeRelease;
    this.AnimeStatus = AnimeStatus;
    this.aniDetails = aniDetails;
    this.animeDetailsMain = animeDetailsMain;
    this.customToolbar = customToolbar;
    this.episodeList = episodeList;
    this.episodeText = episodeText;
    this.expandTxt = expandTxt;
    this.favButton = favButton;
    this.genreRecycler = genreRecycler;
    this.loading = loading;
    this.netErrorAniDetails = netErrorAniDetails;
    this.releaseDate = releaseDate;
    this.toolbarTitle = toolbarTitle;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAnimeDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAnimeDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_anime_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAnimeDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Anime_Image;
      ImageView AnimeImage = ViewBindings.findChildViewById(rootView, id);
      if (AnimeImage == null) {
        break missingId;
      }

      id = R.id.Anime_Image_card;
      CardView AnimeImageCard = ViewBindings.findChildViewById(rootView, id);
      if (AnimeImageCard == null) {
        break missingId;
      }

      id = R.id.Anime_release;
      TextView AnimeRelease = ViewBindings.findChildViewById(rootView, id);
      if (AnimeRelease == null) {
        break missingId;
      }

      id = R.id.Anime_status;
      TextView AnimeStatus = ViewBindings.findChildViewById(rootView, id);
      if (AnimeStatus == null) {
        break missingId;
      }

      id = R.id.ani_details;
      CardView aniDetails = ViewBindings.findChildViewById(rootView, id);
      if (aniDetails == null) {
        break missingId;
      }

      RelativeLayout animeDetailsMain = (RelativeLayout) rootView;

      id = R.id.custom_toolbar;
      Toolbar customToolbar = ViewBindings.findChildViewById(rootView, id);
      if (customToolbar == null) {
        break missingId;
      }

      id = R.id.episode_list;
      RecyclerView episodeList = ViewBindings.findChildViewById(rootView, id);
      if (episodeList == null) {
        break missingId;
      }

      id = R.id.episode_text;
      RelativeLayout episodeText = ViewBindings.findChildViewById(rootView, id);
      if (episodeText == null) {
        break missingId;
      }

      id = R.id.expand_txt;
      ExpandableTextView expandTxt = ViewBindings.findChildViewById(rootView, id);
      if (expandTxt == null) {
        break missingId;
      }

      id = R.id.fav_button;
      ImageButton favButton = ViewBindings.findChildViewById(rootView, id);
      if (favButton == null) {
        break missingId;
      }

      id = R.id.genre_recycler;
      RecyclerView genreRecycler = ViewBindings.findChildViewById(rootView, id);
      if (genreRecycler == null) {
        break missingId;
      }

      id = R.id.loading;
      ImageView loading = ViewBindings.findChildViewById(rootView, id);
      if (loading == null) {
        break missingId;
      }

      id = R.id.net_error_ani_details;
      TextView netErrorAniDetails = ViewBindings.findChildViewById(rootView, id);
      if (netErrorAniDetails == null) {
        break missingId;
      }

      id = R.id.release_date;
      LinearLayout releaseDate = ViewBindings.findChildViewById(rootView, id);
      if (releaseDate == null) {
        break missingId;
      }

      id = R.id.toolbar_title;
      AppCompatTextView toolbarTitle = ViewBindings.findChildViewById(rootView, id);
      if (toolbarTitle == null) {
        break missingId;
      }

      return new ActivityAnimeDetailsBinding((RelativeLayout) rootView, AnimeImage, AnimeImageCard,
          AnimeRelease, AnimeStatus, aniDetails, animeDetailsMain, customToolbar, episodeList,
          episodeText, expandTxt, favButton, genreRecycler, loading, netErrorAniDetails,
          releaseDate, toolbarTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
