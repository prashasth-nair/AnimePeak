// Generated by view binder compiler. Do not edit!
package com.example.animepeak.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.animepeak.R;
import com.google.android.exoplayer2.ui.DefaultTimeBar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PlayerCustomControlsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView animeName;

  @NonNull
  public final ImageButton back;

  @NonNull
  public final Guideline bottomGuideLine;

  @NonNull
  public final Guideline endGuideLine;

  @NonNull
  public final TextView episodeName;

  @NonNull
  public final ImageButton exoFfwd;

  @NonNull
  public final ConstraintLayout exoForwardContainer;

  @NonNull
  public final ImageButton exoPause;

  @NonNull
  public final ImageButton exoPlay;

  @NonNull
  public final DefaultTimeBar exoProgress;

  @NonNull
  public final TextView exoQuality;

  @NonNull
  public final TextView exoRemainingTime;

  @NonNull
  public final ImageButton exoRew;

  @NonNull
  public final ConstraintLayout exoRewindContainer;

  @NonNull
  public final LinearLayout exoTrackSelectionView;

  @NonNull
  public final ConstraintLayout extraControls;

  @NonNull
  public final LinearLayout nextEpisode;

  @NonNull
  public final LinearLayout previousEpisode;

  @NonNull
  public final Guideline startGuideLine;

  @NonNull
  public final Guideline topGuideLine;

  private PlayerCustomControlsBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView animeName, @NonNull ImageButton back, @NonNull Guideline bottomGuideLine,
      @NonNull Guideline endGuideLine, @NonNull TextView episodeName, @NonNull ImageButton exoFfwd,
      @NonNull ConstraintLayout exoForwardContainer, @NonNull ImageButton exoPause,
      @NonNull ImageButton exoPlay, @NonNull DefaultTimeBar exoProgress,
      @NonNull TextView exoQuality, @NonNull TextView exoRemainingTime, @NonNull ImageButton exoRew,
      @NonNull ConstraintLayout exoRewindContainer, @NonNull LinearLayout exoTrackSelectionView,
      @NonNull ConstraintLayout extraControls, @NonNull LinearLayout nextEpisode,
      @NonNull LinearLayout previousEpisode, @NonNull Guideline startGuideLine,
      @NonNull Guideline topGuideLine) {
    this.rootView = rootView;
    this.animeName = animeName;
    this.back = back;
    this.bottomGuideLine = bottomGuideLine;
    this.endGuideLine = endGuideLine;
    this.episodeName = episodeName;
    this.exoFfwd = exoFfwd;
    this.exoForwardContainer = exoForwardContainer;
    this.exoPause = exoPause;
    this.exoPlay = exoPlay;
    this.exoProgress = exoProgress;
    this.exoQuality = exoQuality;
    this.exoRemainingTime = exoRemainingTime;
    this.exoRew = exoRew;
    this.exoRewindContainer = exoRewindContainer;
    this.exoTrackSelectionView = exoTrackSelectionView;
    this.extraControls = extraControls;
    this.nextEpisode = nextEpisode;
    this.previousEpisode = previousEpisode;
    this.startGuideLine = startGuideLine;
    this.topGuideLine = topGuideLine;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PlayerCustomControlsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PlayerCustomControlsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.player_custom_controls, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PlayerCustomControlsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.animeName;
      TextView animeName = ViewBindings.findChildViewById(rootView, id);
      if (animeName == null) {
        break missingId;
      }

      id = R.id.back;
      ImageButton back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.bottomGuideLine;
      Guideline bottomGuideLine = ViewBindings.findChildViewById(rootView, id);
      if (bottomGuideLine == null) {
        break missingId;
      }

      id = R.id.endGuideLine;
      Guideline endGuideLine = ViewBindings.findChildViewById(rootView, id);
      if (endGuideLine == null) {
        break missingId;
      }

      id = R.id.episodeName;
      TextView episodeName = ViewBindings.findChildViewById(rootView, id);
      if (episodeName == null) {
        break missingId;
      }

      id = R.id.exo_ffwd;
      ImageButton exoFfwd = ViewBindings.findChildViewById(rootView, id);
      if (exoFfwd == null) {
        break missingId;
      }

      id = R.id.exo_forward_container;
      ConstraintLayout exoForwardContainer = ViewBindings.findChildViewById(rootView, id);
      if (exoForwardContainer == null) {
        break missingId;
      }

      id = R.id.exo_pause;
      ImageButton exoPause = ViewBindings.findChildViewById(rootView, id);
      if (exoPause == null) {
        break missingId;
      }

      id = R.id.exo_play;
      ImageButton exoPlay = ViewBindings.findChildViewById(rootView, id);
      if (exoPlay == null) {
        break missingId;
      }

      id = R.id.exo_progress;
      DefaultTimeBar exoProgress = ViewBindings.findChildViewById(rootView, id);
      if (exoProgress == null) {
        break missingId;
      }

      id = R.id.exoQuality;
      TextView exoQuality = ViewBindings.findChildViewById(rootView, id);
      if (exoQuality == null) {
        break missingId;
      }

      id = R.id.exo_remaining_time;
      TextView exoRemainingTime = ViewBindings.findChildViewById(rootView, id);
      if (exoRemainingTime == null) {
        break missingId;
      }

      id = R.id.exo_rew;
      ImageButton exoRew = ViewBindings.findChildViewById(rootView, id);
      if (exoRew == null) {
        break missingId;
      }

      id = R.id.exo_rewind_container;
      ConstraintLayout exoRewindContainer = ViewBindings.findChildViewById(rootView, id);
      if (exoRewindContainer == null) {
        break missingId;
      }

      id = R.id.exo_track_selection_view;
      LinearLayout exoTrackSelectionView = ViewBindings.findChildViewById(rootView, id);
      if (exoTrackSelectionView == null) {
        break missingId;
      }

      id = R.id.extraControls;
      ConstraintLayout extraControls = ViewBindings.findChildViewById(rootView, id);
      if (extraControls == null) {
        break missingId;
      }

      id = R.id.nextEpisode;
      LinearLayout nextEpisode = ViewBindings.findChildViewById(rootView, id);
      if (nextEpisode == null) {
        break missingId;
      }

      id = R.id.previousEpisode;
      LinearLayout previousEpisode = ViewBindings.findChildViewById(rootView, id);
      if (previousEpisode == null) {
        break missingId;
      }

      id = R.id.startGuideLine;
      Guideline startGuideLine = ViewBindings.findChildViewById(rootView, id);
      if (startGuideLine == null) {
        break missingId;
      }

      id = R.id.topGuideLine;
      Guideline topGuideLine = ViewBindings.findChildViewById(rootView, id);
      if (topGuideLine == null) {
        break missingId;
      }

      return new PlayerCustomControlsBinding((ConstraintLayout) rootView, animeName, back,
          bottomGuideLine, endGuideLine, episodeName, exoFfwd, exoForwardContainer, exoPause,
          exoPlay, exoProgress, exoQuality, exoRemainingTime, exoRew, exoRewindContainer,
          exoTrackSelectionView, extraControls, nextEpisode, previousEpisode, startGuideLine,
          topGuideLine);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
